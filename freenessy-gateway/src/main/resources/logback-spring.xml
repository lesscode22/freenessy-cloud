<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration>

    <springProperty scope="context" name="applicationName" source="spring.application.name" />
    <springProperty scope="context" name="graylogHost" source="logging.graylog.host" />
    <springProperty scope="context" name="graylogPort" source="logging.graylog.port" />

    <!-- property定义参数, 后面可以通过${}引用 -->
    <!-- 输出日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) %green([%thread]) %boldMagenta(%logger{50}) - %cyan(%msg%n)"/>
    <!-- 日志输出文件位置 -->
    <property name="LOG_HOME" value="/home/freenessy-log" />

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 引用上面定义的日志输出格式 -->
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出到 Graylog -->
<!--    <appender name="GELF" class="de.siegmar.logbackgelf.GelfUdpAppender">-->
<!--        &lt;!&ndash; Graylog服务的地址 &ndash;&gt;-->
<!--        <graylogHost>${graylogHost}</graylogHost>-->
<!--        &lt;!&ndash; UDP Input端口 &ndash;&gt;-->
<!--        <graylogPort>${graylogPort}</graylogPort>-->
<!--        &lt;!&ndash; 最大GELF数据块大小（单位：字节），508为建议最小值，最大值为65467 &ndash;&gt;-->
<!--        <maxChunkSize>508</maxChunkSize>-->
<!--        &lt;!&ndash; 是否使用压缩 &ndash;&gt;-->
<!--        <useCompression>true</useCompression>-->
<!--        <encoder class="de.siegmar.logbackgelf.GelfEncoder">-->
<!--            &lt;!&ndash; 是否发送原生的日志信息 &ndash;&gt;-->
<!--            <includeRawMessage>false</includeRawMessage>-->
<!--            <includeMarker>true</includeMarker>-->
<!--            <includeMdcData>true</includeMdcData>-->
<!--            <includeCallerData>false</includeCallerData>-->
<!--            <includeRootCauseData>false</includeRootCauseData>-->
<!--            &lt;!&ndash; 是否发送日志级别的名称，否则默认以数字代表日志级别 &ndash;&gt;-->
<!--            <includeLevelName>true</includeLevelName>-->
<!--            <shortPatternLayout class="ch.qos.logback.classic.PatternLayout">-->
<!--                <pattern>%m%nopex</pattern>-->
<!--            </shortPatternLayout>-->
<!--            <fullPatternLayout class="ch.qos.logback.classic.PatternLayout">-->
<!--                <pattern>%d - [%thread] %-5level %logger{35} - %msg%n</pattern>-->
<!--            </fullPatternLayout>-->

<!--            &lt;!&ndash; 配置应用名称（服务名称），通过staticField标签可以自定义一些固定的日志字段 &ndash;&gt;-->
<!--            <staticField>app_name:${applicationName}</staticField>-->
<!--            <staticField>ip:$X{ip}</staticField>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!-- 输出到文件  -->
    <appender name="timeFileOutput" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志名,指定最新的文件名，其他文件名使用FileNamePattern -->
        <File>${LOG_HOME}/logFile/out.log</File>
        <!--文件滚动模式-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名,可设置文件类型为gz,开启文件压缩-->
            <FileNamePattern>${LOG_HOME}/logFile/info.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!--单文件大小-->
            <maxFileSize>100MB</maxFileSize>
            <!--总日志文件大小, 超过上限后, 旧日志档案会被异步删除-->
            <totalSizeCap>10GB</totalSizeCap>
            <!--重启时清理文件-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!--输出格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!--设置编码-->
            <charset>UTF-8</charset>
            <!-- 开启缓存 -->
            <ImmediateFlush>false</ImmediateFlush>
        </encoder>
    </appender>

    <!-- 异步配置 -->
    <appender name ="ASYNC-FILE" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的是如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="timeFileOutput"/>
    </appender>

<!--    <appender name ="ASYNC-GELF" class= "ch.qos.logback.classic.AsyncAppender">-->
<!--        &lt;!&ndash; 不丢失日志.默认的是如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 &ndash;&gt;-->
<!--        <discardingThreshold>0</discardingThreshold>-->
<!--        &lt;!&ndash; 更改默认的队列的深度,该值会影响性能.默认值为256 &ndash;&gt;-->
<!--        <queueSize>1024</queueSize>-->
<!--        &lt;!&ndash; 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 &ndash;&gt;-->
<!--        <neverBlock>true</neverBlock>-->
<!--        &lt;!&ndash; 添加附加的appender,最多只能添加一个 &ndash;&gt;-->
<!--        <appender-ref ref ="GELF"/>-->
<!--    </appender>-->

    <!-- 开发环境输出至控制台 -->
    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="CONSOLE" />
        </root>

        <!-- 输出日志细粒度控制, 去掉一些debug日志 -->
        <logger name="org.springframework" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
    </springProfile>

    <!-- 生产环境输出至文件和Graylog -->
    <springProfile name="test,prod">
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
<!--            <appender-ref ref="ASYNC-GELF" />-->
<!--            <appender-ref ref="ASYNC-FILE" />-->
        </root>
    </springProfile>

</configuration>
